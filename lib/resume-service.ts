"use client";

import { supabase } from './supabase';
import { saveConversation, uploadConversationFile } from './conversation-service';
import { v4 as uuidv4 } from 'uuid';
import { extractTextFromPDF } from './gemini'; // Import the PDF extraction function

// Function to extract text from a resume file
export async function extractTextFromFile(file: File): Promise<string> {
  try {
    // Check if the file is a PDF
    if (file.type === 'application/pdf') {
      // Use the existing PDF extraction function
      return await extractTextFromPDF(file);
    } 
    // For plain text files
    else if (file.type === 'text/plain') {
      return await file.text();
    }
    // For other file types (in a real app, you might add more handlers)
    else {
      throw new Error(`Unsupported file type: ${file.type}. Please upload a PDF or text file.`);
    }
  } catch (error) {
    console.error('Error extracting text from file:', error);
    throw new Error('Could not extract text from the uploaded file');
  }
}

// Function to analyze a resume
export async function analyzeResume(
  userId: string,
  resumeFile: File,
  resumeText: string
): Promise<{ id: string; analysis: any }> {
  try {
    // Create a unique ID for this analysis
    const analysisId = uuidv4();
    
    // Create a title for the analysis based on the filename
    const title = `Resume Analysis: ${resumeFile.name.split('.')[0]}`;
    
    // Upload the file to storage
    const fileUrl = await uploadConversationFile(
      userId,
      'resume',
      analysisId,
      resumeFile
    );
    
    if (!fileUrl) {
      throw new Error('Failed to upload resume file');
    }
    
    // Save the conversation with initial message and file info
    const initialMessages = [
      {
        role: 'user' as const,
        content: `I've uploaded my resume: ${resumeFile.name}. Please analyze it.`,
        timestamp: new Date().toISOString()
      }
    ];
    
    // For demo, we'll create a simple analysis
    // In a real app, you would integrate with an AI service
    const analysis = {
      fileUrl,
      fileName: resumeFile.name,
      uploadDate: new Date().toISOString(),
      // Example analysis data - in a real app, this would be generated by an AI
      summary: "Resume analysis summary would appear here.",
      strengths: [
        "Identified strength 1",
        "Identified strength 2",
        "Identified strength 3"
      ],
      weaknesses: [
        "Improvement area 1",
        "Improvement area 2"
      ],
      recommendations: [
        "Recommendation 1",
        "Recommendation 2",
        "Recommendation 3"
      ]
    };
    
    // Save the conversation with the analysis results
    await saveConversation(
      userId,
      'resume',
      title,
      initialMessages,
      analysis
    );
    
    return { id: analysisId, analysis };
  } catch (error) {
    console.error('Error analyzing resume:', error);
    throw error;
  }
}

// Function to get a specific resume analysis
export async function getResumeAnalysis(userId: string, analysisId: string) {
  try {
    // This reads from the conversations storage
    const { data, error } = await supabase.storage
      .from('conversations')
      .download(`${userId}/resumes/${analysisId}.json`);
    
    if (error) throw error;
    
    const textDecoder = new TextDecoder('utf-8');
    const text = textDecoder.decode(await data.arrayBuffer());
    return JSON.parse(text);
  } catch (error) {
    console.error('Error fetching resume analysis:', error);
    return null;
  }
} 